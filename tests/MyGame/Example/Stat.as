/**
 * 
 * Powered by Zhangguodong 
 * 
 */

// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example
{

	import zgd.google.flatbuffers.*;
	import flash.utils.ByteArray;


	public class Stat extends Table
	{
		/**
		 * @param ByteArray inData
		 * @return Stat
		 */
		public static function getRootAsStat(inData:ByteArray):Stat
		{
			var bb:ByteBuffer = ByteBuffer.wrap(inData);
			var obj:Stat = new Stat();
			obj.init(bb.getInt(bb.getPosition()) + bb.getPosition(), bb);
			return obj;
		}

		public static function StatIdentifier():String
		{
			return "MONS";
		}

		public static function StatBufferHasIdentifier(buf:ByteBuffer):Boolean
		{
			return __has_identifier(buf, StatIdentifier());
		}

		public static function StatExtension():String
		{
			return "mon";
		}

		/**
		 * @param int i offset
		 * @param ByteBuffer bb
		 * @return Stat
		 */
		public function init(i:int, bb:ByteBuffer):Stat
		{
			this.bb_pos = i;
			this.bb = bb;
			return this;
		}

		/**
		 * @return String
		 */
		public function getId():String
		{
			var o:int = this.__offset(4);
			return o != 0?this.__string(o + this.bb_pos):null;
		}

		/**
		 * @return Number
		 */
		public function getVal():Number
		{
			var o:int = this.__offset(6);
			return o!=0?this.bb.getLong(o+this.bb_pos):0;
		}

		/**
		 * @return int
		 */
		public function getCount():int
		{
			var o:int = this.__offset(8);
			return o!=0?this.bb.getUshort(o+this.bb_pos):0;
		}

		/**
		 * 转换成json对象
		 */
		public function toJson():Object
		{
			var o:Object = {};
			o.id = getId();
			o.val = getVal();
			o.count = getCount();
			return o;
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @return void
		 */
		public static function startStat(builder:FlatBufferBuilder):void
		{
			builder.startObject(3);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value)
		 * @return Stat offset
		 */
		public static function createStat(builder:FlatBufferBuilder, 
										idOffset:*, 
										val:Number, 
										count:int):int
		{
			builder.startObject(3);
			addId(builder, idOffset);
			addVal(builder, val);
			addCount(builder, count);
			var o:int = builder.endObject();
			return o;
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) *
		 * @return void
		 */
		public static function addId(builder:FlatBufferBuilder, idOffset:*):void
		{
			builder.addOffsetX(0, idOffset, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) Number
		 * @return void
		 */
		public static function addVal(builder:FlatBufferBuilder, val:Number):void
		{
			builder.addLongX(1, val, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @param (if type is * means int offset value) int
		 * @return void
		 */
		public static function addCount(builder:FlatBufferBuilder, count:int):void
		{
			builder.addUshortX(2, count, 0);
		}

		/**
		 * @param FlatBufferBuilder builder
		 * @return int table offset
		 */
		public static function endStat(builder:FlatBufferBuilder):int
		{
			var o:int = builder.endObject();
			return o;
		}

	}


}