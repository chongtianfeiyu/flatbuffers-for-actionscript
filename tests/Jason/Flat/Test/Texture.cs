// automatically generated by the FlatBuffers compiler, do not modify

namespace Jason.Flat.Test
{

using System;
using FlatBuffers;

	///文理结构
public sealed class Texture : Table {
  public static Texture GetRootAsTexture(ByteBuffer _bb) { return GetRootAsTexture(_bb, new Texture()); }
  public static Texture GetRootAsTexture(ByteBuffer _bb, Texture obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Texture __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string TextureName { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetTextureNameBytes() { return __vector_as_arraysegment(4); }
  public short NumTextures { get { int o = __offset(6); return o != 0 ? bb.GetShort(o + bb_pos) : (short)0; } }
  public bool MutateNumTextures(short num_textures) { int o = __offset(6); if (o != 0) { bb.PutShort(o + bb_pos, num_textures); return true; } else { return false; } }
  public TextureData GetTextures(int j) { return GetTextures(new TextureData(), j); }
  public TextureData GetTextures(TextureData obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int TexturesLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }
  public short NumTest { get { int o = __offset(10); return o != 0 ? bb.GetShort(o + bb_pos) : (short)30; } }
  public bool MutateNumTest(short num_test) { int o = __offset(10); if (o != 0) { bb.PutShort(o + bb_pos, num_test); return true; } else { return false; } }
  public short NumTest2 { get { int o = __offset(14); return o != 0 ? bb.GetShort(o + bb_pos) : (short)0; } }
  public bool MutateNumTest2(short num_test2) { int o = __offset(14); if (o != 0) { bb.PutShort(o + bb_pos, num_test2); return true; } else { return false; } }
  public TestAppend TestAppend { get { return GetTestAppend(new TestAppend()); } }
  public TestAppend GetTestAppend(TestAppend obj) { int o = __offset(16); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static Offset<Texture> CreateTexture(FlatBufferBuilder builder,
      StringOffset texture_nameOffset = default(StringOffset),
      short num_textures = 0,
      VectorOffset texturesOffset = default(VectorOffset),
      short num_test = 30,
      short num_test2 = 0,
      Offset<TestAppend> test_appendOffset = default(Offset<TestAppend>)) {
    builder.StartObject(7);
    Texture.AddTestAppend(builder, test_appendOffset);
    Texture.AddTextures(builder, texturesOffset);
    Texture.AddTextureName(builder, texture_nameOffset);
    Texture.AddNumTest2(builder, num_test2);
    Texture.AddNumTest(builder, num_test);
    Texture.AddNumTextures(builder, num_textures);
    return Texture.EndTexture(builder);
  }

  public static void StartTexture(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddTextureName(FlatBufferBuilder builder, StringOffset textureNameOffset) { builder.AddOffset(0, textureNameOffset.Value, 0); }
  public static void AddNumTextures(FlatBufferBuilder builder, short numTextures) { builder.AddShort(1, numTextures, 0); }
  public static void AddTextures(FlatBufferBuilder builder, VectorOffset texturesOffset) { builder.AddOffset(2, texturesOffset.Value, 0); }
  public static VectorOffset CreateTexturesVector(FlatBufferBuilder builder, Offset<TextureData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTexturesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumTest(FlatBufferBuilder builder, short numTest) { builder.AddShort(3, numTest, 30); }
  public static void AddNumTest2(FlatBufferBuilder builder, short numTest2) { builder.AddShort(5, numTest2, 0); }
  public static void AddTestAppend(FlatBufferBuilder builder, Offset<TestAppend> testAppendOffset) { builder.AddOffset(6, testAppendOffset.Value, 0); }
  public static Offset<Texture> EndTexture(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Texture>(o);
  }
  public static void FinishTextureBuffer(FlatBufferBuilder builder, Offset<Texture> offset) { builder.Finish(offset.Value); }
};


}
