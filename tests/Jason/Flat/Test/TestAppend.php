<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace Jason\Flat\Test;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

	///testAppend注释
class TestAppend extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TestAppend
     */
    public static function getRootAsTestAppend(ByteBuffer $bb)
    {
        $obj = new TestAppend();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return TestAppend
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function getTestNum()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getTestNum2()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * change to json object
     */
    public function toJson()
    {
        $o = new array();
        $o['test_num'] = $this->getTestNum();
        $o['test_num2'] = $this->getTestNum2();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTestAppend(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return TestAppend
     */
    public static function createTestAppend(FlatBufferBuilder $builder, $test_num, $test_num2)
    {
        $builder->startObject(2);
        self::addTestNum($builder, $test_num);
        self::addTestNum2($builder, $test_num2);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTestNum(FlatBufferBuilder $builder, $testNum)
    {
        $builder->addIntX(0, $testNum, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTestNum2(FlatBufferBuilder $builder, $testNum2)
    {
        $builder->addIntX(1, $testNum2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTestAppend(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
