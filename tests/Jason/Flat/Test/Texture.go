// automatically generated by the FlatBuffers compiler, do not modify

package Test

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
	///文理结构
type Texture struct {
	_tab flatbuffers.Table
}

func GetRootAsTexture(buf []byte, offset flatbuffers.UOffsetT) *Texture {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Texture{}
	x.Init(buf, n + offset)
	return x
}

func (rcv *Texture) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Texture) TextureName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Texture) NumTextures() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Texture) Textures(obj *TextureData, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
	if obj == nil {
		obj = new(TextureData)
	}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Texture) TexturesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Texture) NumTest() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 30
}

func (rcv *Texture) NumTest2() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Texture) TestAppend(obj *TestAppend) *TestAppend {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TestAppend)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func TextureStart(builder *flatbuffers.Builder) { builder.StartObject(7) }
func TextureAddTextureName(builder *flatbuffers.Builder, textureName flatbuffers.UOffsetT) { builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(textureName), 0) }
func TextureAddNumTextures(builder *flatbuffers.Builder, numTextures int16) { builder.PrependInt16Slot(1, numTextures, 0) }
func TextureAddTextures(builder *flatbuffers.Builder, textures flatbuffers.UOffsetT) { builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(textures), 0) }
func TextureStartTexturesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT { return builder.StartVector(4, numElems, 4)
}
func TextureAddNumTest(builder *flatbuffers.Builder, numTest int16) { builder.PrependInt16Slot(3, numTest, 30) }
func TextureAddNumTest2(builder *flatbuffers.Builder, numTest2 int16) { builder.PrependInt16Slot(5, numTest2, 0) }
func TextureAddTestAppend(builder *flatbuffers.Builder, testAppend flatbuffers.UOffsetT) { builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(testAppend), 0) }
func TextureEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }
