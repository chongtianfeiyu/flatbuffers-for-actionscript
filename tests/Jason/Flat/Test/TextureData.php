<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace Jason\Flat\Test;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

	///文理数据结构
class TextureData extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return TextureData
     */
    public static function getRootAsTextureData(ByteBuffer $bb)
    {
        $obj = new TextureData();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return TextureData
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function getImageSize()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param int offset
     * @return byte
     */
    public function getImageData($j)
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getByte($this->__vector($o) + $j * 1) : 0;
    }

    /**
     * @return int
     */
    public function getImageDataLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return string
     */
    public function getImageDataBytes()
    {
        return $this->__vector_as_bytes(6);
    }

    /**
     * @return int
     */
    public function getTestNum2()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getImageTest()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startTextureData(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return TextureData
     */
    public static function createTextureData(FlatBufferBuilder $builder, $image_size, $image_data, $test_num2, $image_test)
    {
        $builder->startObject(4);
        self::addImageSize($builder, $image_size);
        self::addImageData($builder, $image_data);
        self::addTestNum2($builder, $test_num2);
        self::addImageTest($builder, $image_test);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addImageSize(FlatBufferBuilder $builder, $imageSize)
    {
        $builder->addIntX(0, $imageSize, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addImageData(FlatBufferBuilder $builder, $imageData)
    {
        $builder->addOffsetX(1, $imageData, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createImageDataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startImageDataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTestNum2(FlatBufferBuilder $builder, $testNum2)
    {
        $builder->addIntX(2, $testNum2, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addImageTest(FlatBufferBuilder $builder, $imageTest)
    {
        $builder->addShortX(3, $imageTest, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endTextureData(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
