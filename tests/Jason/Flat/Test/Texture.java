// automatically generated by the FlatBuffers compiler, do not modify

package Jason.Flat.Test;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
	 *文理结构
 */
public final class Texture extends Table {
  public static Texture getRootAsTexture(ByteBuffer _bb) { return getRootAsTexture(_bb, new Texture()); }
  public static Texture getRootAsTexture(ByteBuffer _bb, Texture obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Texture __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String textureName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textureNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public short numTextures() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public boolean mutateNumTextures(short num_textures) { int o = __offset(6); if (o != 0) { bb.putShort(o + bb_pos, num_textures); return true; } else { return false; } }
  public TextureData textures(int j) { return textures(new TextureData(), j); }
  public TextureData textures(TextureData obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int texturesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public short numTest() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 30; }
  public boolean mutateNumTest(short num_test) { int o = __offset(10); if (o != 0) { bb.putShort(o + bb_pos, num_test); return true; } else { return false; } }
  public short numTest2() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public boolean mutateNumTest2(short num_test2) { int o = __offset(14); if (o != 0) { bb.putShort(o + bb_pos, num_test2); return true; } else { return false; } }
  public TestAppend testAppend() { return testAppend(new TestAppend()); }
  public TestAppend testAppend(TestAppend obj) { int o = __offset(16); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static int createTexture(FlatBufferBuilder builder,
      int texture_nameOffset,
      short num_textures,
      int texturesOffset,
      short num_test,
      short num_test2,
      int test_appendOffset) {
    builder.startObject(7);
    Texture.addTestAppend(builder, test_appendOffset);
    Texture.addTextures(builder, texturesOffset);
    Texture.addTextureName(builder, texture_nameOffset);
    Texture.addNumTest2(builder, num_test2);
    Texture.addNumTest(builder, num_test);
    Texture.addNumTextures(builder, num_textures);
    return Texture.endTexture(builder);
  }

  public static void startTexture(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addTextureName(FlatBufferBuilder builder, int textureNameOffset) { builder.addOffset(0, textureNameOffset, 0); }
  public static void addNumTextures(FlatBufferBuilder builder, short numTextures) { builder.addShort(1, numTextures, 0); }
  public static void addTextures(FlatBufferBuilder builder, int texturesOffset) { builder.addOffset(2, texturesOffset, 0); }
  public static int createTexturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTexturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNumTest(FlatBufferBuilder builder, short numTest) { builder.addShort(3, numTest, 30); }
  public static void addNumTest2(FlatBufferBuilder builder, short numTest2) { builder.addShort(5, numTest2, 0); }
  public static void addTestAppend(FlatBufferBuilder builder, int testAppendOffset) { builder.addOffset(6, testAppendOffset, 0); }
  public static int endTexture(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishTextureBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

