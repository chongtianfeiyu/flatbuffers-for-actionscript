// automatically generated by the FlatBuffers compiler, do not modify

namespace Jason.Flat.Test
{

using System;
using FlatBuffers;

	///文理数据结构
public sealed class TextureData : Table {
  public static TextureData GetRootAsTextureData(ByteBuffer _bb) { return GetRootAsTextureData(_bb, new TextureData()); }
  public static TextureData GetRootAsTextureData(ByteBuffer _bb, TextureData obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public TextureData __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int ImageSize { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public bool MutateImageSize(int image_size) { int o = __offset(4); if (o != 0) { bb.PutInt(o + bb_pos, image_size); return true; } else { return false; } }
  public byte GetImageData(int j) { int o = __offset(6); return o != 0 ? bb.Get(__vector(o) + j * 1) : (byte)0; }
  public int ImageDataLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetImageDataBytes() { return __vector_as_arraysegment(6); }
  public bool MutateImageData(int j, byte image_data) { int o = __offset(6); if (o != 0) { bb.Put(__vector(o) + j * 1, image_data); return true; } else { return false; } }
  public int TestNum2 { get { int o = __offset(8); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public bool MutateTestNum2(int test_num2) { int o = __offset(8); if (o != 0) { bb.PutInt(o + bb_pos, test_num2); return true; } else { return false; } }
  public short ImageTest { get { int o = __offset(10); return o != 0 ? bb.GetShort(o + bb_pos) : (short)0; } }
  public bool MutateImageTest(short image_test) { int o = __offset(10); if (o != 0) { bb.PutShort(o + bb_pos, image_test); return true; } else { return false; } }

  public static Offset<TextureData> CreateTextureData(FlatBufferBuilder builder,
      int image_size = 0,
      VectorOffset image_dataOffset = default(VectorOffset),
      int test_num2 = 0,
      short image_test = 0) {
    builder.StartObject(4);
    TextureData.AddTestNum2(builder, test_num2);
    TextureData.AddImageData(builder, image_dataOffset);
    TextureData.AddImageSize(builder, image_size);
    TextureData.AddImageTest(builder, image_test);
    return TextureData.EndTextureData(builder);
  }

  public static void StartTextureData(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddImageSize(FlatBufferBuilder builder, int imageSize) { builder.AddInt(0, imageSize, 0); }
  public static void AddImageData(FlatBufferBuilder builder, VectorOffset imageDataOffset) { builder.AddOffset(1, imageDataOffset.Value, 0); }
  public static VectorOffset CreateImageDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartImageDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddTestNum2(FlatBufferBuilder builder, int testNum2) { builder.AddInt(2, testNum2, 0); }
  public static void AddImageTest(FlatBufferBuilder builder, short imageTest) { builder.AddShort(3, imageTest, 0); }
  public static Offset<TextureData> EndTextureData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TextureData>(o);
  }
};


}
