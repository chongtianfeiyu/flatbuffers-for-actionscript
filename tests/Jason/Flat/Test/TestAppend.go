// automatically generated by the FlatBuffers compiler, do not modify

package Test

import (
	flatbuffers "github.com/google/flatbuffers/go"
)
	///testAppend注释
type TestAppend struct {
	_tab flatbuffers.Table
}

func GetRootAsTestAppend(buf []byte, offset flatbuffers.UOffsetT) *TestAppend {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TestAppend{}
	x.Init(buf, n + offset)
	return x
}

func NewTestAppend()*TestAppend{
	x := &TestAppend{}
	return x
}

func (rcv *TestAppend) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TestAppend) TestNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TestAppend) TestNum2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TestAppend) Start(builder *flatbuffers.Builder) { builder.StartObject(2) }
func (rcv *TestAppend) AddTestNum(builder *flatbuffers.Builder, testNum int32) { builder.PrependInt32Slot(0, testNum, 0) }
func (rcv *TestAppend) AddTestNum2(builder *flatbuffers.Builder, testNum2 int32) { builder.PrependInt32Slot(1, testNum2, 0) }
func (rcv *TestAppend) End(builder *flatbuffers.Builder) flatbuffers.UOffsetT { return builder.EndObject() }

func (rcv *TestAppend) Create(builder *flatbuffers.Builder, testNum int32, testNum2 int32) flatbuffers.UOffsetT {
	builder.StartObject(2)
	rcv.AddTestNum(builder, testNum)
	rcv.AddTestNum2(builder, testNum2)
	return builder.EndObject()
}

