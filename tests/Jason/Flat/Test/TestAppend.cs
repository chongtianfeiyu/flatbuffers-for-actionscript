// automatically generated by the FlatBuffers compiler, do not modify

namespace Jason.Flat.Test
{

using System;
using FlatBuffers;

	///testAppend注释
public sealed class TestAppend : Table {
  public static TestAppend GetRootAsTestAppend(ByteBuffer _bb) { return GetRootAsTestAppend(_bb, new TestAppend()); }
  public static TestAppend GetRootAsTestAppend(ByteBuffer _bb, TestAppend obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public TestAppend __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int TestNum { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public bool MutateTestNum(int test_num) { int o = __offset(4); if (o != 0) { bb.PutInt(o + bb_pos, test_num); return true; } else { return false; } }
  public int TestNum2 { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public bool MutateTestNum2(int test_num2) { int o = __offset(6); if (o != 0) { bb.PutInt(o + bb_pos, test_num2); return true; } else { return false; } }

  public static Offset<TestAppend> CreateTestAppend(FlatBufferBuilder builder,
      int test_num = 0,
      int test_num2 = 0) {
    builder.StartObject(2);
    TestAppend.AddTestNum2(builder, test_num2);
    TestAppend.AddTestNum(builder, test_num);
    return TestAppend.EndTestAppend(builder);
  }

  public static void StartTestAppend(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTestNum(FlatBufferBuilder builder, int testNum) { builder.AddInt(0, testNum, 0); }
  public static void AddTestNum2(FlatBufferBuilder builder, int testNum2) { builder.AddInt(1, testNum2, 0); }
  public static Offset<TestAppend> EndTestAppend(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TestAppend>(o);
  }
};


}
