// automatically generated by the FlatBuffers compiler, do not modify

package Jason.Flat.Test;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
	 *testAppend注释
 */
public final class TestAppend extends Table {
  public static TestAppend getRootAsTestAppend(ByteBuffer _bb) { return getRootAsTestAppend(_bb, new TestAppend()); }
  public static TestAppend getRootAsTestAppend(ByteBuffer _bb, TestAppend obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public TestAppend __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int testNum() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateTestNum(int test_num) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, test_num); return true; } else { return false; } }
  public int testNum2() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateTestNum2(int test_num2) { int o = __offset(6); if (o != 0) { bb.putInt(o + bb_pos, test_num2); return true; } else { return false; } }

  public static int createTestAppend(FlatBufferBuilder builder,
      int test_num,
      int test_num2) {
    builder.startObject(2);
    TestAppend.addTestNum2(builder, test_num2);
    TestAppend.addTestNum(builder, test_num);
    return TestAppend.endTestAppend(builder);
  }

  public static void startTestAppend(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addTestNum(FlatBufferBuilder builder, int testNum) { builder.addInt(0, testNum, 0); }
  public static void addTestNum2(FlatBufferBuilder builder, int testNum2) { builder.addInt(1, testNum2, 0); }
  public static int endTestAppend(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

